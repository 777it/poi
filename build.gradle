buildscript {
	ext {
		springBootVersion = '1.4.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.springframework:springloaded:1.2.5.RELEASE")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// for Doma 2
// JavaクラスとSQLファイルの出力先ディレクトリを同じにする
processResources.destinationDir = compileJava.destinationDir

// コンパイルより前にSQLファイルを出力先ディレクトリにコピーするために依存関係を逆転する
compileJava.dependsOn processResources

configurations {
	providedRuntime
	domaGenRuntime
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
	compile("org.apache.commons:commons-lang3:3.4")
	compile("commons-beanutils:commons-beanutils:1.9.2")
	compile("commons-io:commons-io:2.4")
	compile("org.seasar.doma:doma:2.16.0")
	compile("org.freemarker:freemarker:2.3.23")
	compile("org.postgresql:postgresql:9.4.1208")
	compile("net.sf.supercsv:super-csv:2.4.0")
	compile("net.sf.supercsv:super-csv-java8:2.4.0")
	compile("org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4:1.16")
	compile("org.codehaus.janino:janino:2.7.5")
	compile("org.projectlombok:lombok:1.14.8")
	compile group: 'com.mortennobel', name: 'java-image-scaling', version: '0.8.6'
	compile('org.thymeleaf.extras:thymeleaf-extras-java8time:2.1.0.RELEASE')
	providedRuntime("org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}")
	// for Doma-Gen
	domaGenRuntime("org.seasar.doma:doma-gen:2.16.0")
	domaGenRuntime("org.postgresql:postgresql:9.4.1208")
	// Test
	testCompile("org.springframework.boot:spring-boot-starter-test:1.2.1.RELEASE")
}

group = 'poi'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}
// for Gradle
task wrapper(type: Wrapper) {
	gradleVersion = '2.9'
}
apply from:'eclipse.gradle'

// for Doma-Gen

task domaGen << {
	def rootPackageName  = 'poi'
	def daoPackagePath   = 'src/main/java/poi/domain/dao'
	def dbUrl            = 'jdbc:postgresql://localhost:5432/poi'
	def dbUser           = 'postgres'
	def dbPassword       = 'postgres'
	def tableNamePattern = '.*'

	def importOfComponentAndAutowiredDomaConfig = "${rootPackageName}.util.doma.ComponentAndAutowiredDomaConfig"
	def workDirPath      = 'work'
	def workDaoDirPath   = "${workDirPath}/dao"

	// 作業用ディレクトリを削除する
	clearDir("${workDirPath}")

	// 現在の Dao インターフェースのバックアップを取得する
	copy() {
		from "${daoPackagePath}"
		into "${workDaoDirPath}/org"
	}

	// Dao インターフェース、Entity クラスを生成する
	ant.taskdef(resource: 'domagentask.properties',
	classpath: configurations.domaGenRuntime.asPath)
	ant.gen(url: "${dbUrl}", user: "${dbUser}", password: "${dbPassword}", tableNamePattern: "${tableNamePattern}") {
		entityConfig(packageName: "${rootPackageName}.entity", listenerSuperclassName: "${rootPackageName}.entity.CommonListener")
		daoConfig(packageName: "${rootPackageName}.dao")
		sqlConfig()
	}

	// 生成された Dao インターフェースを作業用ディレクトリにコピーし、
	// @ComponentAndAutowiredDomaConfig アノテーションを付加する
	copy() {
		from "${daoPackagePath}"
		into "${workDaoDirPath}/replace"
		filter {
			line -> line.replaceAll('import org.seasar.doma.Dao;', "import ${importOfComponentAndAutowiredDomaConfig};\nimport org.seasar.doma.Dao;")
			.replaceAll('@Dao', '@Dao\n@ComponentAndAutowiredDomaConfig')
		}
	}

	// @ComponentAndAutowiredDomaConfig アノテーションを付加した Dao インターフェースを
	// dao パッケージへ戻す
	copy() {
		from "${workDaoDirPath}/replace"
		into "${daoPackagePath}"
	}

	// 元々 dao パッケージ内にあったファイルを元に戻す
	copy() {
		from "${workDaoDirPath}/org"
		into "${daoPackagePath}"
	}
	// 作業用ディレクトリを削除する
	clearDir("${workDirPath}")
}

void clearDir(String dirPath) {
	delete dirPath
}

